use rand::Rng;
use std::io;
use std::io::Write;

fn main() {
    println!("=== –£–ì–ê–î–ê–ô –ß–ò–°–õ–û ===");
    println!("–ö–æ–º–ø—å—é—Ç–µ—Ä –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!\n");

    let rand_number = rand::thread_rng().gen_range(1..=100);
    let mut attempts = 0;

    loop {
        let input_number = match get_user_input() {
            Some(num) => num,
            None => continue,
        };

        attempts += 1;

        if input_number < rand_number {
            println!("–ú–æ—ë —á–∏—Å–ª–æ –ë–û–õ–¨–®–ï —Ç–≤–æ–µ–≥–æ.\n");
        } else if input_number > rand_number {
            println!("–ú–æ—ë —á–∏—Å–ª–æ –ú–ï–ù–¨–®–ï —Ç–≤–æ–µ–≥–æ.\n");
        } else {
            println!("\nüéâ –¢–´ –ü–û–ë–ï–î–ò–õ!!! üéâ");
            println!("–¢—ã —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –∑–∞ {attempts} –ø–æ–ø—ã—Ç–æ–∫.");
            break;
        }
    }
}

fn get_user_input() -> Option<u32> {
    print!("–í–≤–µ–¥–∏ —Å–≤–æ—ë —á–∏—Å–ª–æ: ");
    io::stdout().flush().expect("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±—É—Ñ–µ—Ä–∞.");

    let mut input = String::new();
    if let Err(_) = io::stdin().read_line(&mut input) {
        println!("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.");
        return None;
    }

    match input.trim().parse::<u32>() {
        Ok(num) => Some(num),
        Err(_) => {
            println!("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!");
            None
        }
    }
}
